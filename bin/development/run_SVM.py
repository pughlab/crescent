import os
import numpy as np
import pandas as pd
from scipy.io import mmread
import time as tm
from sklearn.svm import LinearSVC
import argparse
from sklearn.calibration import CalibratedClassifierCV

'''
Run baseline classifier: SVM
Wrapper script to run an SVM classifier with a linear kernel.

Parameters
----------
TrainMatrixPath : Cells-genes matrix with cell unique barcodes
as row names and gene names as column names.
OutputDir : Output directory
Threshold : Threshold used when rejecting the cells, default is 0.7.
'''

parser = argparse.ArgumentParser(description='Cell Type Labeling with SVM.')

parser.add_argument(
    '-i', 'AlignedMatrixPath',
    type=str,
    help="The path to the aligned matrix and labels files generated by---\n"
         "the run_TransferData function."
)

# parser.add_argument(
#     '-y','TrainLabelPath',
#     type=str,
#     help="The path to the cell type labels of the training (reference) dataset,\n"
#          "(n_samples,) where n_samples is the number of cells in the query dataset."
# )

# parser.add_argument(
#     '-q','QueryMatrixPath',
#     type=str,
#     help="The path to the testing dataset matrix---\n"
#          "gene x cell matrix"
# )

parser.add_argument(
    '-o','--OutputDir',
    help="Directory to save outputs (default: '.').",
    type=str,
    default="."
)

parser.add_argument(
    '-t','--Threshold',
    help="Threshold (cut off) used to determine if a cell is \n"
         "predictable or not (unlabeled) given the reference dataset.",
    type=float,
    default=0.7
)

args = parser.parse_args()

#Read the Ref gene x cell matrix in mtx format.
X_train = mmread(args.AlignedMatrixPath + '/Ref.mtx.gz')
y_train = pd.read_csv(args.AlignedMatrixPath + '/Labels.csv', header=None)

X_train = np.asarray(X_train.todense()).T

#Create amd traom the model with the Referemce data
Classifier = LinearSVC()
clf = CalibratedClassifierCV(Classifier)

clf.fit(X_train, y_train)

os.chdir(args.OutputDir)

Predtion_list = []

#Predict cell type for each sample respectively
Query_list = pd.read_csv(args.AlignedMatrixPath + '/Query_names.csv', header=None)

for i in range(Query_list.shape[0]):
    dataset = Query_list.iloc[i,0]
    X_test = mmread(args.AlignedMatrixPath + '/' + dataset + '.mtx.gz')
    X_test = np.asarray(X_test.todense()).T

    predicted = clf.predict(X_test)
    prob = np.max(clf.predict_proba(X_test), axis = 1)
    # Probobilities less than Threshold are marked as "Unlabeled"
    unlabeled = np.where(prob < args.Threshold)
    predicted[unlabeled] = 'Unlabeled'

    # The prediction results only contains cell type labels. The order of the predicted
    # labels is the same as the order of the cell in the query data matrix
    # Combine all the prediction results together, which can be add as metadata
    # to the Seurat integrated object later.
    Predtion_list.extend(predicted)

# This file can be read and add to Seurat integrated object. The order of these
# predicted labels is the same as the order of the colnames of the seurat integrated object
pd.DataFrame(Predtion_list).to_csv("SVM_Pred_Labels.tsv", index = False)
